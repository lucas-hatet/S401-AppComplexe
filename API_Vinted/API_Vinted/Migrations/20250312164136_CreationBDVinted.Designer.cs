// <auto-generated />
using System;
using API_Vinted.Models.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API_Vinted.Migrations
{
    [DbContext(typeof(VintedDBContext))]
    [Migration("20250312164136_CreationBDVinted")]
    partial class CreationBDVinted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Achat", b =>
                {
                    b.Property<int>("NumTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumTransaction"));

                    b.Property<DateTime>("DateAchat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasColumnName("dateachat")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("IDClient")
                        .HasColumnType("integer");

                    b.Property<int>("IDOption")
                        .HasColumnType("integer");

                    b.Property<int>("IDRetour")
                        .HasColumnType("integer");

                    b.HasKey("NumTransaction");

                    b.HasIndex("IDOption");

                    b.HasIndex("IDRetour");

                    b.ToTable("achat", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Adresse", b =>
                {
                    b.Property<int>("IDAdresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idadresse");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDAdresse"));

                    b.Property<string>("AdresseLigne2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("adresseligne2");

                    b.Property<int>("IDVille")
                        .HasColumnType("integer")
                        .HasColumnName("idville");

                    b.Property<string>("NomCompletAdresse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nomcompletadresse");

                    b.Property<string>("NumEtNomRue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numetnomrue");

                    b.HasKey("IDAdresse");

                    b.HasIndex("IDVille");

                    b.ToTable("adresse", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Article", b =>
                {
                    b.Property<int>("IDArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDArticle"));

                    b.Property<DateTime>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasColumnName("dateajout")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IDCategorie")
                        .HasColumnType("integer")
                        .HasColumnName("idcategorie");

                    b.Property<int>("IDFormat")
                        .HasColumnType("integer")
                        .HasColumnName("idformat");

                    b.Property<int>("IDMarque")
                        .HasColumnType("integer")
                        .HasColumnName("idmarque");

                    b.Property<int>("IDModePaiement")
                        .HasColumnType("integer")
                        .HasColumnName("idmodepaiement");

                    b.Property<int>("IDVendeur")
                        .HasColumnType("integer")
                        .HasColumnName("idvendeur");

                    b.Property<int>("NBVue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("nbvue");

                    b.Property<string>("NomArticle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nomarticle");

                    b.Property<int>("NumTransaction")
                        .HasColumnType("integer")
                        .HasColumnName("numtransation");

                    b.Property<float>("Prix")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("prix");

                    b.HasKey("IDArticle");

                    b.HasIndex("IDCategorie")
                        .IsUnique();

                    b.HasIndex("IDFormat");

                    b.HasIndex("IDMarque");

                    b.HasIndex("IDModePaiement");

                    b.HasIndex("IDVendeur");

                    b.HasIndex("NumTransaction")
                        .IsUnique();

                    b.ToTable("article", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Avis", b =>
                {
                    b.Property<int>("IDAcheteur")
                        .HasColumnType("integer")
                        .HasColumnName("idacheteur");

                    b.Property<int>("IDVendeur")
                        .HasColumnType("integer")
                        .HasColumnName("idvendeur");

                    b.Property<bool>("Automatique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("automatique");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("description");

                    b.Property<decimal>("Note")
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("note");

                    b.HasKey("IDAcheteur", "IDVendeur");

                    b.HasIndex("IDVendeur");

                    b.ToTable("avis", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Caracteristique", b =>
                {
                    b.Property<int>("IDCaracteristique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idcaracteristique");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDCaracteristique"));

                    b.Property<string>("NomCaracteristique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nomcaracteristique");

                    b.HasKey("IDCaracteristique");

                    b.ToTable("caracteristique", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CaracteristiqueArticle", b =>
                {
                    b.Property<int>("IDArticle")
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    b.Property<int>("IDCaracteristique")
                        .HasColumnType("integer")
                        .HasColumnName("idcaracteristique");

                    b.Property<int>("IDValeur")
                        .HasColumnType("integer")
                        .HasColumnName("idvaleur");

                    b.HasKey("IDArticle", "IDCaracteristique");

                    b.HasIndex("IDCaracteristique");

                    b.HasIndex("IDValeur");

                    b.ToTable("caracteristique_article", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CaracteristiqueCategorie", b =>
                {
                    b.Property<int>("IDCategorie")
                        .HasColumnType("integer")
                        .HasColumnName("idcategorie");

                    b.Property<int>("IDCaracteristique")
                        .HasColumnType("integer")
                        .HasColumnName("idcaracteristique");

                    b.HasKey("IDCategorie", "IDCaracteristique");

                    b.HasIndex("IDCaracteristique");

                    b.ToTable("caracteristique_categorie", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CarteBleue", b =>
                {
                    b.Property<int>("IDCarte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idcarte");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDCarte"));

                    b.Property<string>("DateExpiration")
                        .IsRequired()
                        .HasColumnType("char(5)")
                        .HasColumnName("dateexpiration");

                    b.Property<int>("IDClient")
                        .HasColumnType("integer")
                        .HasColumnName("idclient");

                    b.Property<int>("IDTypeCarte")
                        .HasColumnType("integer")
                        .HasColumnName("idtypecarte");

                    b.Property<string>("NumCarteBleue")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("numcartebleue");

                    b.Property<string>("TitulaireCarte")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("titulairecarte");

                    b.HasKey("IDCarte");

                    b.HasIndex("IDClient");

                    b.HasIndex("IDTypeCarte");

                    b.ToTable("carte_bancaire", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Categorie", b =>
                {
                    b.Property<int>("IDCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idcategorie");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDCategorie"));

                    b.Property<int>("IDCategorieParent")
                        .HasColumnType("integer")
                        .HasColumnName("idcategorieparent");

                    b.Property<string>("LibelleCategorie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("libellecategorie");

                    b.HasKey("IDCategorie");

                    b.HasIndex("IDCategorieParent");

                    b.ToTable("categorie", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Client", b =>
                {
                    b.Property<int>("IDClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idclient");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDClient"));

                    b.Property<DateTime>("DateDerniereConnexion")
                        .HasColumnType("Date")
                        .HasColumnName("datederniereconnexion");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("Date")
                        .HasColumnName("datenaissance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int>("IDAdresseFacturation")
                        .HasColumnType("integer")
                        .HasColumnName("idadressefacturation");

                    b.Property<int>("IDAdresseLivraison")
                        .HasColumnType("integer")
                        .HasColumnName("idadresselivraison");

                    b.Property<int>("IDLangue")
                        .HasColumnType("integer")
                        .HasColumnName("idlangue");

                    b.Property<int>("IDPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("idphoto");

                    b.Property<int>("IDSexe")
                        .HasColumnType("integer")
                        .HasColumnName("idsexe");

                    b.Property<int>("IDVille")
                        .HasColumnType("integer")
                        .HasColumnName("idville");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mail");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("motdepasse");

                    b.Property<string>("NomCompteClient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nomcompteclient");

                    b.Property<string>("NumSiret")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("numsiret");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("pseudo");

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("raisonsociale");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("telephone");

                    b.Property<double>("ValeurPorteMonnaie")
                        .HasColumnType("Numeric(18, 2)")
                        .HasColumnName("valeurportemonnaie");

                    b.HasKey("IDClient");

                    b.HasIndex("IDAdresseFacturation")
                        .IsUnique();

                    b.HasIndex("IDAdresseLivraison")
                        .IsUnique();

                    b.HasIndex("IDLangue");

                    b.HasIndex("IDPhoto");

                    b.HasIndex("IDSexe");

                    b.HasIndex("IDVille");

                    b.ToTable("client", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CodePostal", b =>
                {
                    b.Property<string>("CP")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("codepostal");

                    b.HasKey("CP");

                    b.ToTable("codepostal", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CompteBancaire", b =>
                {
                    b.Property<int>("IDCompte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idcompte");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDCompte"));

                    b.Property<int>("IDClient")
                        .HasColumnType("integer")
                        .HasColumnName("idclient");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("iban");

                    b.Property<string>("TitulaireCompte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("titulairecompte");

                    b.HasKey("IDCompte");

                    b.HasIndex("IDClient");

                    b.ToTable("comptebancaire", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.EnvoiRelais", b =>
                {
                    b.Property<int>("IDClient")
                        .HasColumnType("integer")
                        .HasColumnName("idclient");

                    b.Property<int>("IDMethodeEnvoi")
                        .HasColumnType("integer")
                        .HasColumnName("idmethodeenvoi");

                    b.Property<int>("IDRelais")
                        .HasColumnType("integer")
                        .HasColumnName("idrelais");

                    b.HasKey("IDClient");

                    b.HasIndex("IDMethodeEnvoi");

                    b.HasIndex("IDRelais");

                    b.ToTable("envoirelais", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Etat", b =>
                {
                    b.Property<int>("IDEtat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idetat");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDEtat"));

                    b.Property<int>("LibelleEtat")
                        .HasColumnType("integer")
                        .HasColumnName("libelleetat");

                    b.HasKey("IDEtat");

                    b.ToTable("etat", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.EtatArticle", b =>
                {
                    b.Property<int>("IDEtat")
                        .HasColumnType("integer")
                        .HasColumnName("idetat");

                    b.Property<int>("IDArticle")
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    b.HasKey("IDEtat");

                    b.HasIndex("IDArticle");

                    b.ToTable("etat_article", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Favori", b =>
                {
                    b.Property<int>("IDClient")
                        .HasColumnType("integer")
                        .HasColumnName("idclient");

                    b.Property<int>("IDArticle")
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    b.HasKey("IDClient", "IDArticle");

                    b.HasIndex("IDArticle");

                    b.ToTable("favori", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.FormatColis", b =>
                {
                    b.Property<int>("IDFormat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idformat");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDFormat"));

                    b.Property<string>("DescriptonFormat")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("descriptionformat");

                    b.Property<float>("FraisDePort")
                        .HasColumnType("real")
                        .HasColumnName("fraisport");

                    b.Property<string>("LibelleFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("libelleformat");

                    b.HasKey("IDFormat");

                    b.ToTable("formatcolis", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Langue", b =>
                {
                    b.Property<int>("IDLangue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IDLangue");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDLangue"));

                    b.Property<string>("Libellelangue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("libellelangue");

                    b.HasKey("IDLangue");

                    b.ToTable("langue", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Marque", b =>
                {
                    b.Property<int>("IDMarque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmarque");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDMarque"));

                    b.Property<string>("NomMarque")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nommarque");

                    b.HasKey("IDMarque");

                    b.ToTable("marque", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Message", b =>
                {
                    b.Property<int>("IDExpediteur")
                        .HasColumnType("integer")
                        .HasColumnName("idexpediteur");

                    b.Property<int>("IDDestinataire")
                        .HasColumnType("integer")
                        .HasColumnName("iddestinataire");

                    b.Property<int>("IDArticle")
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    b.Property<string>("ContenuMessage")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("DateMessage")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datemessage");

                    b.Property<double>("PrixOffre")
                        .HasColumnType("double precision")
                        .HasColumnName("prixoffre");

                    b.HasKey("IDExpediteur", "IDDestinataire", "IDArticle", "ContenuMessage", "DateMessage");

                    b.HasIndex("IDArticle");

                    b.HasIndex("IDDestinataire");

                    b.ToTable("message", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.MethodeEnvoi", b =>
                {
                    b.Property<int>("IDMethodeEnvoi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmethodeenvoi");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDMethodeEnvoi"));

                    b.Property<string>("DescriptionMethodeEnvoi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionmethodeenvoi");

                    b.Property<string>("NomMethodeEnvoi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nommethodeenvoi");

                    b.HasKey("IDMethodeEnvoi");

                    b.ToTable("methode_envoi", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.ModePaiement", b =>
                {
                    b.Property<int>("IDModePaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmodepaiement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDModePaiement"));

                    b.Property<string>("LibelleModePaiement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("libellemodepaiement");

                    b.HasKey("IDModePaiement");

                    b.ToTable("mode_paiement", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.OptionLivraison", b =>
                {
                    b.Property<int>("IDOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idoption");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDOption"));

                    b.Property<string>("DescriptionOption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nomoption");

                    b.Property<double>("Frais")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("frais");

                    b.Property<string>("LibelleOption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("libelleoption");

                    b.HasKey("IDOption");

                    b.ToTable("option_livraison", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Pays", b =>
                {
                    b.Property<int>("IDPays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idpays");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDPays"));

                    b.Property<string>("NomPays")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nompays");

                    b.HasKey("IDPays");

                    b.ToTable("pays", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Photo", b =>
                {
                    b.Property<int>("IDPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idphoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDPhoto"));

                    b.Property<string>("URLPhoto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("urlphoto");

                    b.HasKey("IDPhoto");

                    b.ToTable("photo", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.PhotoArticle", b =>
                {
                    b.Property<int>("IDPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idphoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDPhoto"));

                    b.Property<int>("IDArticle")
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    b.HasKey("IDPhoto");

                    b.HasIndex("IDArticle");

                    b.ToTable("photo_article", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.PhotoRetour", b =>
                {
                    b.Property<int>("IDPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idphoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDPhoto"));

                    b.Property<int>("IDRetour")
                        .HasColumnType("integer")
                        .HasColumnName("idretour");

                    b.HasKey("IDPhoto");

                    b.HasIndex("IDRetour");

                    b.ToTable("photo_retour", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.PointRelais", b =>
                {
                    b.Property<int>("IDRelais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idrelais");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDRelais"));

                    b.Property<int>("IDAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("idadresse");

                    b.Property<string>("nomrelais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nomrelais");

                    b.HasKey("IDRelais");

                    b.ToTable("point_relais", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Retour", b =>
                {
                    b.Property<int>("IDRetour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idretour");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDRetour"));

                    b.Property<bool>("Accepte")
                        .HasColumnType("boolean")
                        .HasColumnName("Accepte");

                    b.Property<string>("CodeRetour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("coderetour");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("Date")
                        .HasColumnName("datecreation");

                    b.Property<DateTime>("DateDerniereDemande")
                        .HasColumnType("Date")
                        .HasColumnName("datedernieredemande");

                    b.Property<bool>("DemandeExpert")
                        .HasColumnType("boolean")
                        .HasColumnName("demandeexpert");

                    b.Property<int>("IDOption")
                        .HasColumnType("integer")
                        .HasColumnName("idoption");

                    b.Property<string>("MotifRetour")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("motifretour");

                    b.HasKey("IDRetour");

                    b.HasIndex("IDOption");

                    b.ToTable("retour", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Sexe", b =>
                {
                    b.Property<int>("IDSexe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idsexe");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDSexe"));

                    b.Property<string>("LibelleSexe")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("libellesexe");

                    b.HasKey("IDSexe");

                    b.ToTable("sexe", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Signalement", b =>
                {
                    b.Property<int>("IDClient")
                        .HasColumnType("integer")
                        .HasColumnName("idclient");

                    b.Property<int>("IDArticle")
                        .HasColumnType("integer")
                        .HasColumnName("idarticle");

                    b.Property<DateTime>("DateSignalement")
                        .HasColumnType("Date")
                        .HasColumnName("datesignalement");

                    b.Property<string>("MotifSignalement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("motifsignalement");

                    b.HasKey("IDClient", "IDArticle");

                    b.HasIndex("IDArticle");

                    b.ToTable("signalement", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.TypeCarte", b =>
                {
                    b.Property<int>("IDTypeCarte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idtypecarte");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDTypeCarte"));

                    b.Property<string>("LibelleTypeCarte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("libelletypecarte");

                    b.HasKey("IDTypeCarte");

                    b.ToTable("type_carte", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Valeur", b =>
                {
                    b.Property<int>("IDValeur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idvaleur");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDValeur"));

                    b.Property<int>("IDCaracteristique")
                        .HasColumnType("integer")
                        .HasColumnName("idcaracteristique");

                    b.Property<string>("LibValeur")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("valeur");

                    b.HasKey("IDValeur");

                    b.HasIndex("IDCaracteristique");

                    b.ToTable("valeur", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Ville", b =>
                {
                    b.Property<int>("IDVille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idville");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDVille"));

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasColumnType("char(5)")
                        .HasColumnName("codepostal");

                    b.Property<int>("IDPays")
                        .HasColumnType("integer")
                        .HasColumnName("idpays");

                    b.Property<string>("NomVille")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nomville");

                    b.HasKey("IDVille");

                    b.HasIndex("CP");

                    b.HasIndex("IDPays");

                    b.ToTable("ville", "public");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Achat", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.OptionLivraison", "OptionLivraison")
                        .WithMany("Achats")
                        .HasForeignKey("IDOption")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Retour", "Retours")
                        .WithMany("Achats")
                        .HasForeignKey("IDRetour")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionLivraison");

                    b.Navigation("Retours");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Adresse", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Ville", "Ville")
                        .WithMany("Adresses")
                        .HasForeignKey("IDVille")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Article", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Categorie", "Categorie")
                        .WithOne("Articles")
                        .HasForeignKey("API_Vinted.Models.EntityFramework.Article", "IDCategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.FormatColis", "FormatColis")
                        .WithMany("Articles")
                        .HasForeignKey("IDFormat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Marque", "Marque")
                        .WithMany("Articles")
                        .HasForeignKey("IDMarque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.ModePaiement", "ModePaiement")
                        .WithMany("Articles")
                        .HasForeignKey("IDModePaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Vendeur")
                        .WithMany("Articles")
                        .HasForeignKey("IDVendeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Achat", "Achat")
                        .WithOne("Articles")
                        .HasForeignKey("API_Vinted.Models.EntityFramework.Article", "NumTransaction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achat");

                    b.Navigation("Categorie");

                    b.Navigation("FormatColis");

                    b.Navigation("Marque");

                    b.Navigation("ModePaiement");

                    b.Navigation("Vendeur");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Avis", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Acheteur")
                        .WithMany("AvisMis")
                        .HasForeignKey("IDAcheteur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Vendeur")
                        .WithMany("AvisSur")
                        .HasForeignKey("IDVendeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acheteur");

                    b.Navigation("Vendeur");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CaracteristiqueArticle", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Article", "Article")
                        .WithMany("CaracteristiquesArticle")
                        .HasForeignKey("IDArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Caracteristique", "Caracteristique")
                        .WithMany("CaracteristiquesArticle")
                        .HasForeignKey("IDCaracteristique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Valeur", "Valeur")
                        .WithMany("CaracteristiquesArticle")
                        .HasForeignKey("IDValeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Caracteristique");

                    b.Navigation("Valeur");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CaracteristiqueCategorie", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Caracteristique", "Caracteristique")
                        .WithMany("CaracteristiquesCategorie")
                        .HasForeignKey("IDCaracteristique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Categorie", "Categorie")
                        .WithMany("CaracteristiquesCategorie")
                        .HasForeignKey("IDCategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristique");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CarteBleue", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Client")
                        .WithMany("CartesBleues")
                        .HasForeignKey("IDClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.TypeCarte", "TypeCarte")
                        .WithMany("CartesBleues")
                        .HasForeignKey("IDTypeCarte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TypeCarte");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Categorie", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Categorie", "CategorieParent")
                        .WithMany("CategoriesEnfants")
                        .HasForeignKey("IDCategorieParent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategorieParent");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Client", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Adresse", "AdresseFacturation")
                        .WithOne("ClientAdresseFacturation")
                        .HasForeignKey("API_Vinted.Models.EntityFramework.Client", "IDAdresseFacturation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Adresse", "AdresseLivraison")
                        .WithOne("ClientAdresseLivraison")
                        .HasForeignKey("API_Vinted.Models.EntityFramework.Client", "IDAdresseLivraison")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Langue", "Langue")
                        .WithMany("Clients")
                        .HasForeignKey("IDLangue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Photo", "Photo")
                        .WithMany("Clients")
                        .HasForeignKey("IDPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Sexe", "Sexe")
                        .WithMany("Clients")
                        .HasForeignKey("IDSexe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Ville", "Ville")
                        .WithMany("Clients")
                        .HasForeignKey("IDVille")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdresseFacturation");

                    b.Navigation("AdresseLivraison");

                    b.Navigation("Langue");

                    b.Navigation("Photo");

                    b.Navigation("Sexe");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CompteBancaire", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Client")
                        .WithMany("CompteBancaires")
                        .HasForeignKey("IDClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.EnvoiRelais", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Client")
                        .WithMany("EnvoisRelais")
                        .HasForeignKey("IDClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.MethodeEnvoi", "MethodeEnvoi")
                        .WithMany("EnvoisRelais")
                        .HasForeignKey("IDMethodeEnvoi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.PointRelais", "PointRelais")
                        .WithMany("EnvoisRelais")
                        .HasForeignKey("IDRelais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MethodeEnvoi");

                    b.Navigation("PointRelais");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.EtatArticle", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Article", "Article")
                        .WithMany("EtatsArticles")
                        .HasForeignKey("IDArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Etat", "Etat")
                        .WithMany("EtatsArticles")
                        .HasForeignKey("IDEtat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Etat");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Favori", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Article", "Article")
                        .WithMany("Favoris")
                        .HasForeignKey("IDArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Client")
                        .WithMany("Favoris")
                        .HasForeignKey("IDClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Message", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Article", "Article")
                        .WithMany("Messages")
                        .HasForeignKey("IDArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Destinataire")
                        .WithMany("MessagesRecus")
                        .HasForeignKey("IDDestinataire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Expediteur")
                        .WithMany("MessagesEnvoyes")
                        .HasForeignKey("IDExpediteur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Destinataire");

                    b.Navigation("Expediteur");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.PhotoArticle", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Article", "Article")
                        .WithMany("Photos")
                        .HasForeignKey("IDArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.PhotoRetour", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Retour", "Retour")
                        .WithMany("Photos")
                        .HasForeignKey("IDRetour")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Retour");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Retour", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.OptionLivraison", "Option")
                        .WithMany("Retours")
                        .HasForeignKey("IDOption")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Signalement", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Article", "Article")
                        .WithMany("Signalements")
                        .HasForeignKey("IDArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Client", "Client")
                        .WithMany("Signalements")
                        .HasForeignKey("IDClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Valeur", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.Caracteristique", "Caracteristique")
                        .WithMany("Valeurs")
                        .HasForeignKey("IDCaracteristique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristique");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Ville", b =>
                {
                    b.HasOne("API_Vinted.Models.EntityFramework.CodePostal", "CodePostal")
                        .WithMany("Villes")
                        .HasForeignKey("CP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Vinted.Models.EntityFramework.Pays", "Pays")
                        .WithMany("Villes")
                        .HasForeignKey("IDPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodePostal");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Achat", b =>
                {
                    b.Navigation("Articles")
                        .IsRequired();
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Adresse", b =>
                {
                    b.Navigation("ClientAdresseFacturation")
                        .IsRequired();

                    b.Navigation("ClientAdresseLivraison")
                        .IsRequired();
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Article", b =>
                {
                    b.Navigation("CaracteristiquesArticle");

                    b.Navigation("EtatsArticles");

                    b.Navigation("Favoris");

                    b.Navigation("Messages");

                    b.Navigation("Photos");

                    b.Navigation("Signalements");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Caracteristique", b =>
                {
                    b.Navigation("CaracteristiquesArticle");

                    b.Navigation("CaracteristiquesCategorie");

                    b.Navigation("Valeurs");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Categorie", b =>
                {
                    b.Navigation("Articles")
                        .IsRequired();

                    b.Navigation("CaracteristiquesCategorie");

                    b.Navigation("CategoriesEnfants");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Client", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("AvisMis");

                    b.Navigation("AvisSur");

                    b.Navigation("CartesBleues");

                    b.Navigation("CompteBancaires");

                    b.Navigation("EnvoisRelais");

                    b.Navigation("Favoris");

                    b.Navigation("MessagesEnvoyes");

                    b.Navigation("MessagesRecus");

                    b.Navigation("Signalements");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.CodePostal", b =>
                {
                    b.Navigation("Villes");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Etat", b =>
                {
                    b.Navigation("EtatsArticles");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.FormatColis", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Langue", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Marque", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.MethodeEnvoi", b =>
                {
                    b.Navigation("EnvoisRelais");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.ModePaiement", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.OptionLivraison", b =>
                {
                    b.Navigation("Achats");

                    b.Navigation("Retours");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Pays", b =>
                {
                    b.Navigation("Villes");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Photo", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.PointRelais", b =>
                {
                    b.Navigation("EnvoisRelais");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Retour", b =>
                {
                    b.Navigation("Achats");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Sexe", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.TypeCarte", b =>
                {
                    b.Navigation("CartesBleues");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Valeur", b =>
                {
                    b.Navigation("CaracteristiquesArticle");
                });

            modelBuilder.Entity("API_Vinted.Models.EntityFramework.Ville", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
